#include <iostream>
#include <vector>
#include <forward_list>
#include <limits>
#include <functional>


class Hash
{
  public:
    Hash(int _size) 
    {
        hash_table.resize(_size > 0 ? _size : 0);
    }
    
    void insert(int x)
    {
       int index = h(x) % hash_table.size();
       hash_table[index].push_front(x);
    }
    
    void deleteElem(int x)
    {
        int index = h(x) % hash_table.size();
        hash_table[index].remove(x);
        
        /*auto prev_iter = hash_table[index].before_begin();
        for(auto it = hash_table[index].begin(); it != hash_table[index].end(); ++it)
        {
            if(*it == x) 
            {
                hash_table[index].erase_after(prev_iter);
                it = prev_iter;
            }
            else prev_iter = it;
        }*/
    }
    
    bool find(int key)
    {
        int index = h(key) % hash_table.size();
        for(auto it = hash_table[index].begin(); it != hash_table[index].end(); ++it)
        {
            if(*it == key)
            {
                return true;
            }
        }
        return false;
    }
    
    void Show_Table() 
    {
      for (int i = 0; i < hash_table.size(); i++) 
      {
        std::cout << i;
        for (auto x : hash_table[i])
        {
          std::cout << " --> " << x;
        }
        std::cout << "\n";
      }
    }
    
  private:
    std::hash<int> h;
    std::vector<std::forward_list<int>> hash_table;
};

int main()
{
    std::vector<int> _vector{8,13,54,23,25,6,4,21,15,8};
    Hash table(13);
    for(auto elem : _vector)
    {
        table.insert(elem);
    }
    table.Show_Table();
    std::cout << std::boolalpha << table.find(10) << std::noboolalpha << "\n";
    table.deleteElem(8);
    std::cout << "\n\n";
    table.Show_Table();
    return 0;
}
